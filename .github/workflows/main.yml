name: Terraform

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  issues: write  # Grant permission to create and modify issues

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="bucket=my-tf-state-bucket" -backend-config="key=state/terraform.tfstate" -backend-config="region=us-west-2"
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create Approval Issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: 'devops-mundri',
              repo: 'github-tf-demo',
              title: 'Manual Approval Needed',
              body: 'Terraform plan is ready. Please review and add the "approved" or "abort" label to this issue.',
            });
            return { id: issue.number };
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Wait for Approval
        id: wait_for_approval
        run: |
          # Setting a timeout of 3600 seconds (1 hour) for the entire script
          TIMEOUT=3600
          START_TIME=$(date +%s)

          while true; do
            # Check the current time to implement the timeout mechanism
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$(( CURRENT_TIME - START_TIME ))

            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Timeout reached. Exiting..."
              exit 1
            fi

            # Fetch the labels of the approval issue from GitHub API
            RESPONSE=$(curl -s -X GET -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              https://api.github.com/repos/devops-mundri/github-tf-demo/issues/${{ steps.create_issue.outputs.id }}/labels)
            echo "API Response: $RESPONSE"  # Print the response for debugging

            # Check if the response contains the "Not Found" message
            if echo "$RESPONSE" | grep -q "Not Found"; then
              echo "Error: Issue not found or authentication failed. Please check the repository, issue number, and authentication token."
              exit 1
            fi

            LABELS=$(echo "$RESPONSE" | jq -r 'map(.name) | join(" ")')

            if echo "$LABELS" | grep -q "approved"; then
              echo "Approved!"
              echo "::set-output name=result::approved"
              break
            elif echo "$LABELS" | grep -q "abort"; then
              echo "Aborted by reviewer."
              exit 1
            fi

            echo "Waiting for approval or abort label..."
            sleep 60
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        continue-on-error: true

      - name: Terraform Apply
        if: steps.wait_for_approval.outputs.result == 'approved'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Output
        if: steps.wait_for_approval.outputs.result == 'approved'
        run: terraform output
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
